org: khzouroussama
app: calorie-app
service: calorie-app

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-plugin-monorepo
  - serverless-esbuild

provider:
  name: aws
  runtime: nodejs18.x
  lambdaHashingVersion: '20201221'
  region: ${env:REGION}
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    STAGE: ${self:provider.stage}

  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'
        - Effect: 'Allow'
          Action:
            - 'cognito-idp:AdminAddUserToGroup'
          Resource:
            - Fn::GetAtt: [CalorieAppUserPool, Arn]

functions:
  sign-up:
    handler: src/auth/sign-up/sign-up-handler.main
    events:
      - cognitoUserPool:
          pool: calorie-app-user-pool-${self:provider.stage}
          trigger: PostConfirmation
          existing: true

  create-food-entry:
    handler: src/food-entry/create-food-entry/create-food-entry-handler.main
    events:
      - http:
          path: /v1/food-entries
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CalorieAppApiGatewayAuthorizer

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    target: 'node14'
    packager: yarn
    external:
      - '@aws-sdk/client-cognito-identity-provider'
      - yup

resources:
  Resources:
    CalorieAppDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    CalorieAppUserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName: 'calorie-app-user-pool-${self:provider.stage}'
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireNumbers: true
            RequireSymbols: true

    CalorieAppUserPoolClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: 'calorie-app-user-pool-client-${self:provider.stage}'
        UserPoolId:
          Ref: CalorieAppUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false # Set to true if you're building a web application
        RefreshTokenValidity: 30 # Duration in days

    AdminGroup:
      Type: 'AWS::Cognito::UserPoolGroup'
      Properties:
        GroupName: 'admin-${self:provider.stage}'
        Description: 'Admin Group for ${self:provider.stage}'
        UserPoolId:
          Ref: CalorieAppUserPool
        Precedence: 1

    UserGroup:
      Type: 'AWS::Cognito::UserPoolGroup'
      Properties:
        GroupName: 'user-${self:provider.stage}'
        Description: 'User Group for ${self:provider.stage}'
        UserPoolId:
          Ref: CalorieAppUserPool
        Precedence: 2

    CalorieAppApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: calorieAppAuthorizer-${self:provider.stage}
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - CalorieAppUserPool
              - Arn
